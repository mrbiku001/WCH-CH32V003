
---:HOW TO USE GPIO AS OUTPUT:---

*GPIO Ports
There are three port groups available in the MCU, Port A, C and D and in each group, number of pins are there.

Each Port pin can be configured as GPIO output and can be used in the application.

Uses of GPIO
GPIOs are mainly used for connecting LEDs, Relay control, providing status and control signals when connecting other devices or could be used for driving LCDs like OLED in SPI mode where SPI is emulated by GPIO bit banging, etc.\
 
Note: Go through the datasheet
##Note about GPIO D7 / NRST
Please note PD7 is by default is configured as MCU reset pin, you need to configure it as GPIO by configuring it with WCH Link Programmer Utility or in the code.

via code:WCH-CH32V003\code\ex001.c
via WCH Link Utility: change-PD7-mode-from-intrupt-to-GPIO-via-WCH-Link Utility.webp

---:GPIO as Output Example Code for CH32V003:---

In order to configure any pin as GPIO output, you need to use the following code, let us call that in a function “GPIOConfig” as shown below, this will be the initialization code and need to be called before using the GPIO.

For any configuration, clock for that GPIO port needs to be enabled first.

Three Parameters are there for any GPIO when configuring as output

GPIO_Pin: this is to define which Pin, for example for D0 it will be GPIO_Pin_0
GPIO_Mode: to configure if the output will be an 
            open drain (GPIO_Mode_Out_OD) or push-pull (GPIO_Mode_Out_PP)
GPIO_Speed: to configure how fast you want control the GPIO. 
            There are three options: GPIO_Speed_10MHz, GPIO_Speed_2MHz, GPIO_Speed_50MHz.
            This basically configures the drive strength of the GPIO internally.
        
code1. configure single GPIO as output.
        code\ex002.c

code2. If multiple pins of same port needs to be configured with similar settings, you can write as shown below (GPIO D0 and D1):
        code\ex003.c

code3. but, if you have different settings for different GPIO you can do like this (GPIO D0 and D1):
        code\ex004.c

code4. And, now suppose if you want to configure different pins of different ports, you can write code like this: (GPIO D0 and C1):
        code\ex005.c

if you go through ch32v00x_gpio.h header file, you can see there following function which you will be using for GPIO output operations

Function names are self explainatory.

void     GPIO_SetBits(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin);
void     GPIO_ResetBits(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin);
void     GPIO_WriteBit(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, BitAction BitVal);
void     GPIO_Write(GPIO_TypeDef *GPIOx, uint16_t PortVal);
void     GPIO_PinLockConfig(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin);

GPIO_SetBits is used for setting the Pin High
GPIO_ResetBits is used for setting the Pin Low
GPIO_WriteBit is used when you want to SET and REST the pin with the same function
GPIO_Write function is provided to set complete GPIO port, for example, if you have connected a 16×2 LCD display with 8 bit data port on Port D, you can use this function to set the data port which will set D0-7 pins with a single function call.
GPIO_PinLockConfig this very interesting and special function, this helps you lock the pin so that accidently in other part of the configuration cannot be changed.
